//example of some shaders compiled
flat basic.vs flat.fs
texture basic.vs texture.fs
depth quad.vs depth.fs
multi basic.vs multi.fs

light_singlepass basic.vs light_singlepass.fs
light_multipass basic.vs light_multipass.fs
normal basic.vs normal.fs
shadow basic.vs shadow.fs
uvs basic.vs uvs.fs
occlusion basic.vs occlusion.fs
fx quad.vs fx.fs
deferred quad.vs deferred.fs
deferred_ws basic.vs deferred.fs
add_ambient quad.vs add_ambient.fs

\pbr

#define RECIPROCAL_PI 0.3183098861837697
#define PI 3.14159265358979323846

// Normal Distribution Function using GGX Distribution
float D_GGX (	const in float NoH, const in float linearRoughness )
{
	float a2 = linearRoughness * linearRoughness;
	float f = (NoH * NoH) * (a2 - 1.0) + 1.0;
	return a2 / (PI * f * f);
}

// Fresnel term with colorized fresnel (f90 = 1)
float F_Schlick( const in float VoH, const in float f0)
{
	float f = pow(1.0 - VoH, 5.0);
	return f0 + (1.0 - f0) * f;
}

// Fresnel term with colorized fresnel
vec3 F_Schlick( const in float VoH, const in vec3 f0)
{
	float f = pow(1.0 - VoH, 5.0);
	return f0 + (vec3(1.0) - f0) * f;
}

// Geometry Term: Geometry masking/shadowing due to microfacets
float GGX(float NdotV, float k){
	return NdotV / (NdotV * (1.0 - k) + k);
}
	
float G_Smith( float NdotV, float NdotL, float roughness)
{
	float k = pow(roughness + 1.0, 2.0) / 8.0;
	return GGX(NdotL, k) * GGX(NdotV, k);
}

//this is the cook torrance specular reflection model
vec3 specularBRDF( float roughness, vec3 f0, float NoH, float NoV, float NoL, float LoH )
{
	float a = roughness * roughness;

	// Normal Distribution Function
	float D = D_GGX( NoH, a );

	// Fresnel Function
	vec3 F = F_Schlick( LoH, f0 );

	// Visibility Function (shadowing/masking)
	float G = G_Smith( NoV, NoL, roughness );
		
	// Norm factor
	vec3 spec = D * G * F;
	spec /= (4.0 * NoL * NoV + 1e-6);

	return spec;
}

// Diffuse Reflections: Disney BRDF using retro-reflections using F term, this is much more complex!!
float Fd_Burley ( const in float NoV, const in float NoL, const in float LoH, const in float linearRoughness)
{
        float f90 = 0.5 + 2.0 * linearRoughness * LoH * LoH;
        float lightScatter = F_Schlick(NoL, f90);
        float viewScatter  = F_Schlick(NoV, f90);
        return lightScatter * viewScatter * RECIPROCAL_PI;
}

// NORMAL MAP
\norm_tangent

mat3 cotangent_frame(vec3 N, vec3 p, vec2 uv){
	// get edge vectors of the pixel triangle
	vec3 dp1 = dFdx( p );
	vec3 dp2 = dFdy( p );
	vec2 duv1 = dFdx( uv );
	vec2 duv2 = dFdy( uv );
	
	// solve the linear system
	vec3 dp2perp = cross( dp2, N );
	vec3 dp1perp = cross( N, dp1 );
	vec3 T = dp2perp * duv1.x + dp1perp * duv2.x;
	vec3 B = dp2perp * duv1.y + dp1perp * duv2.y;
 
	// construct a scale-invariant frame 
	float invmax = inversesqrt( max( dot(T,T), dot(B,B) ) );
	return mat3( T * invmax, B * invmax, N );}

vec3 perturbNormal(vec3 N, vec3 WP, vec2 uv, vec3 normal_pixel){
	normal_pixel = normal_pixel * 255./127. - 128./127.;
	mat3 TBN = cotangent_frame(N, WP, uv);
	return normalize(TBN * normal_pixel);}

// IN and UNIFORMS
\in_uniforms

in vec3 v_position; //position in local coords
in vec3 v_world_position; //position in world coords
in vec3 v_normal; //normal in the pixel

in vec2 v_uv; // texture coordinates

uniform vec3 u_camera_position; //camera eye

uniform vec4 u_color;

// textures
uniform sampler2D u_texture; // base color
uniform sampler2D u_metallic_roughness_texture; // metallic roughness
uniform sampler2D u_emissive_texture; // emissive
uniform sampler2D u_occ_texture; // occlusion
uniform sampler2D u_normal_texture; // normal
uniform sampler2D shadowmap; // shadows


uniform float u_time; // time
uniform float u_alpha_cutoff; // alpha cutoff
uniform mat4 u_shadow_viewproj; // shadow view projection matrix
uniform float u_shadow_bias;

\basic.vs

#version 330 core

in vec3 a_vertex;
in vec3 a_normal;
in vec2 a_coord;
in vec4 a_color;

uniform vec3 u_camera_position;

uniform mat4 u_model;
uniform mat4 u_viewprojection;

//this will store the color for the pixel shader
out vec3 v_position;
out vec3 v_world_position;
out vec3 v_normal;
out vec2 v_uv;
out vec4 v_color;

uniform float u_time;

void main() {
	v_normal = (u_model * vec4( a_normal, 0.0) ).xyz; //calcule the normal in camera space (the NormalMatrix is like ViewMatrix but without traslation)
	v_position = a_vertex; //calcule the vertex in object space
	v_world_position = (u_model * vec4( v_position, 1.0) ).xyz;
	
	v_color = a_color; //store the color in the varying var to use it from the pixel shader

	v_uv = a_coord; //store the texture coordinates

	gl_Position = u_viewprojection * vec4( v_world_position, 1.0 ); //calcule the position of the vertex using the matrices
}

\uvs.fs

#version 330 core

in vec2 v_uv;

out vec4 FragColor;

void main()
{
	FragColor = vec4(v_uv, 1.0, 1.0);
}

\occlusion.fs

#version 330 core
in vec2 v_uv;
uniform sampler2D u_metallic_roughness_texture;

out vec4 FragColor;

void main()
{
	vec2 uv = v_uv;
	float occ = texture(u_metallic_roughness_texture, v_uv).x;

	FragColor = vec4(occ, occ, occ, 1.0);
}

\fx.fs

#version 330 core

in vec2 v_uv;

uniform sampler2D u_texture;
uniform float u_time;

out vec4 FragColor;

void main()
{
	vec2 uv = v_uv;
	vec4 color = texture( u_texture, v_uv );
	color = vec4(1.0) - color;

	FragColor = color;
}

\quad.vs

#version 330 core

in vec3 a_vertex;
in vec2 a_coord;
out vec2 v_uv;

void main()
{	
	v_uv = a_coord;
	gl_Position = vec4( a_vertex, 1.0 );
}


\flat.fs

#version 330 core

uniform vec4 u_color;

out vec4 FragColor;

void main()
{
	FragColor = u_color;
}


\texture.fs

#version 330 core

in vec3 v_position;
in vec3 v_world_position;
in vec3 v_normal;
in vec2 v_uv;
in vec4 v_color;

uniform vec4 u_color;
uniform sampler2D u_texture;
uniform float u_time;
uniform float u_alpha_cutoff;

out vec4 FragColor;

void main() {
	vec2 uv = v_uv;
	vec4 color = u_color;
	color *= texture( u_texture, v_uv );

	if(color.a < u_alpha_cutoff)
		discard;

	FragColor = color;}


\shadow.fs
#version 330 core

in vec3 v_position;
in vec3 v_world_position;
in vec3 v_normal;
in vec2 v_uv;
in vec4 v_color;

uniform float u_alpha_cutoff;
uniform vec4 u_color;
uniform sampler2D u_texture;

out vec4 FragColor;

void main() {
	vec4 color = u_color;
	color *= texture( u_texture, v_uv );
	if(color.a < u_alpha_cutoff)
		discard;

	FragColor = vec4(1.0);
}

\multi.fs

#version 330 core

in vec3 v_position;
in vec3 v_world_position;
in vec3 v_normal;
in vec2 v_uv;

uniform vec4 u_color;
uniform sampler2D u_texture;
uniform sampler2D u_normal_texture;
uniform sampler2D u_mat_properties_texture;
uniform float u_time;
uniform float u_alpha_cutoff;
uniform bool u_read_normal;

layout(location = 0) out vec4 FragColor;
layout(location = 1) out vec4 NormalMapColor;
layout(location = 2) out vec4 ExtraColor;

#include "norm_tangent"

void main()
{
	vec2 uv = v_uv;
	vec4 color = u_color;
	color *= texture( u_texture, uv );
	
	vec4 material_properties = texture2D(u_mat_properties_texture, v_uv);
	
	vec3 N;
	if(u_read_normal){
		vec3 normal_pixel = texture2D(u_normal_texture, v_uv).xyz;
		N = perturbNormal(v_normal, v_world_position, v_uv, normal_pixel);
	}
	else N = normalize(v_normal);

	if(color.a < u_alpha_cutoff)
		discard;


	FragColor = color;
	NormalMapColor = vec4(N*0.5 + vec3(0.5),1.0);
	ExtraColor = material_properties;
	
}


\depth.fs

#version 330 core

uniform vec2 u_camera_nearfar;
uniform sampler2D u_texture; //depth map
in vec2 v_uv;
out vec4 FragColor;

void main() {
	float n = u_camera_nearfar.x;
	float f = u_camera_nearfar.y;
	float z = texture2D(u_texture,v_uv).x;
	float color = n * (z + 1.0) / (f + n - z * (f - n));
	FragColor = vec4(color);}


\instanced.vs

#version 330 core

in vec3 a_vertex;
in vec3 a_normal;
in vec2 a_coord;

in mat4 u_model;

uniform vec3 u_camera_position;

uniform mat4 u_viewprojection;

//this will store the color for the pixel shader
out vec3 v_position;
out vec3 v_world_position;
out vec3 v_normal;
out vec2 v_uv;

void main() {
	//calcule the normal in camera space (the NormalMatrix is like ViewMatrix but without traslation)
	v_normal = (u_model * vec4( a_normal, 0.0) ).xyz;
	
	//calcule the vertex in object space
	v_position = a_vertex;
	v_world_position = (u_model * vec4( a_vertex, 1.0) ).xyz;
	
	//store the texture coordinates
	v_uv = a_coord;

	//calcule the position of the vertex using the matrices
	gl_Position = u_viewprojection * vec4( v_world_position, 1.0 );}


\light_singlepass.fs

#version 330 core

#include "in_uniforms"

// lights
uniform vec3 u_ambient_light; 
uniform vec3 u_emissive_factor;

const int MAX_LIGHTS = 5;
uniform vec3 u_light_pos[MAX_LIGHTS];
uniform vec3 u_light_color[MAX_LIGHTS];
uniform int u_num_lights;
uniform float u_maxdist[MAX_LIGHTS];
uniform float u_light_factor[MAX_LIGHTS];

uniform int u_light_type[MAX_LIGHTS];
uniform vec3 u_direction[MAX_LIGHTS]; // directional light
uniform float u_spotCosineCutoff[MAX_LIGHTS];
uniform float u_spotExponent[MAX_LIGHTS];
uniform bool u_read_normal;

out vec4 FragColor;

#include "norm_tangent"

void main()
{
	vec2 uv = v_uv;
	vec4 color = u_color;
	color *= texture( u_texture, v_uv );

	if(color.a < u_alpha_cutoff)
		discard;
	
	float occlusion = texture( u_metallic_roughness_texture, v_uv ).x;
	vec4 emissive = texture ( u_emissive_texture, v_uv);

	vec3 light = u_ambient_light * occlusion;

	//very important to normalize as they come
	//interpolated so normalization is lost
	vec3 N;
	if (!u_read_normal )
		N = normalize( v_normal );
	else{ 
		vec3 normal_pixel = texture2D( u_normal_texture, v_uv ).xyz;
		N = perturbNormal(v_normal, v_world_position, v_uv, normal_pixel);
	}

	for( int i = 0; i < MAX_LIGHTS; ++i ) {
		if(i < u_num_lights) {
			vec3 L;
			if( u_light_type[i] == 0 ) //directional  light
				L = u_direction[i];
			else //point and spot light
				L = normalize(u_light_pos[i] - v_world_position); //vector from the point to the light

			//float NdotL = max( dot(L,N), 0.0 );	//compute how much is aligned
			float NdotL = dot(N,L); //compute how much is aligned
			NdotL = clamp( NdotL, 0.0, 1.0 ); //light cannot be negative (but the dot product can)

			float light_distance = length(u_light_pos[i] - v_world_position ); //compute distance
			float att_factor = u_maxdist[i] - light_distance; //compute a linear attenuation factor
			att_factor /= u_maxdist[i]; //normalize factor
			att_factor = max( att_factor, 0.0 ); //ignore negative values
			if (u_light_type[i] == 0)
				att_factor = 1.0;

			float spotFactor = 1.0;
			if ( u_light_type[i] == 2)
			{ // the light is a spotlight
			    vec3 D = normalize(u_direction[i]);  // unit vector!
		    	float spotCosine = dot(D,-L);
		    	if (spotCosine > u_spotCosineCutoff[i])
		        	spotFactor = pow(spotCosine,u_spotExponent[i]);
		    	else
		    		spotFactor = 0.0;
			}	// Light intensity will be multiplied by spotFactor

			light += (( NdotL * u_light_color[i]) * att_factor) * u_light_factor[i] * spotFactor; //apply to amount of light
		}
	}

	color.xyz *= light;
	color.xyz += emissive.xyz * u_emissive_factor;
	
	FragColor = color;
}



\light_multipass.fs

#version 330 core

#include "in_uniforms"

// lights
uniform vec3 u_ambient_light; // ambient
uniform vec3 u_emissive_factor; // emissive
uniform vec3 u_light_color; // color
uniform int u_light_type; // type (DIRECTIONAL, POINT, SPOT)
uniform vec3 u_direction; // spot light
uniform vec3 u_light_position; // position
uniform float u_maxdist; // max distance (attenuation)
uniform float u_light_factor; // intensity
uniform float u_spotCosineCutoff; // cos(angle) spotlight
uniform float u_spotExponent; // exp spotlight
uniform bool u_read_normal; // normal texture?

out vec4 FragColor;

#include "norm_tangent"


void main()
{
	vec2 uv = v_uv;
	vec4 color = u_color;
	color *= texture( u_texture, v_uv );

	if(color.a < u_alpha_cutoff)
		discard;
	
	float occlusion = texture( u_metallic_roughness_texture, v_uv ).x;
	vec4 emissive = texture ( u_emissive_texture, v_uv);

	vec3 light = u_ambient_light * occlusion;

	//very important to normalize as they come interpolated so normalization is lost
	vec3 N;
	if (!u_read_normal )
		N = normalize( v_normal );
	else{ 
		vec3 normal_pixel = texture2D( u_normal_texture, v_uv ).xyz;
		N = perturbNormal(v_normal, v_world_position, v_uv, normal_pixel);
	}

	// light vector
	vec3 L;

	//depending on the light type...
	if( u_light_type == 0 ) //directional  light
		L = u_direction; // same for all pixels
	else //point and spot light
		L = normalize(u_light_position - v_world_position); //vector from the point to the light

	float NdotL = dot(N,L); //compute how much is aligned
	NdotL = clamp( NdotL, 0.0, 1.0 ); //light cannot be negative (but the dot product can)

	/* vec3 v = normalize(u_camera_position - v_world_position);
	vec3 r = reflect(-l,n);
	float r_v = dot(r,v);
	r_v = clamp(r_v,0,1); */

	float light_distance = length(u_light_position - v_world_position ); //compute distance
	float att_factor = u_maxdist - light_distance; //compute a linear attenuation factor
	att_factor /= u_maxdist; //normalize factor
	att_factor = max( att_factor, 0.0 ); //ignore negative values
	if (u_light_type == 0)
		att_factor = 1.0;


	float spotFactor = 1.0;
	if ( u_light_type == 2) 
	{ // the light is a spotlight
	    vec3 D = normalize(u_direction);  // unit vector!
    	float spotCosine = dot(D,-L);
    	if (spotCosine > u_spotCosineCutoff)
        	spotFactor = pow(spotCosine,u_spotExponent);
    	else
    		spotFactor = 0.0;
	}	// Light intensity will be multiplied by spotFactor


	// SHADOW
	//compute final shadow factor by comparing
	float shadow_factor = 1.0;
	if (u_light_type != 1)
	{
		//project our 3D position to the shadowmap
		vec4 proj_pos = u_shadow_viewproj * vec4(v_world_position,1.0);

		//from homogeneus space to clip space
		vec2 shadow_uv = proj_pos.xy / proj_pos.w;

		//from clip space to uv space
		shadow_uv = shadow_uv * 0.5 + vec2(0.5);

		//get point depth [-1 .. +1] in non-linear space
		float real_depth = (proj_pos.z - u_shadow_bias) / proj_pos.w;

		//normalize from [-1..+1] to [0..+1] still non-linear
		real_depth = real_depth * 0.5 + 0.5;

		//read depth from depth buffer in [0..+1] non-linear
		float shadow_depth = texture( shadowmap, shadow_uv).x;


		//we can compare them, even if they are not linear
		if( shadow_depth < real_depth )
			shadow_factor = 0.0;

		//it is outside on the sides
		if( shadow_uv.x < 0.0 || shadow_uv.x > 1.0 || shadow_uv.y < 0.0 || shadow_uv.y > 1.0 )
			shadow_factor = 1.0;

		//it is before near or behind far plane
		if(real_depth < 0.0 || real_depth > 1.0)
			shadow_factor = 1.0;
	}



	//apply to amount of light
	light += (( NdotL * u_light_color) * att_factor) * u_light_factor * spotFactor * shadow_factor;

	color.xyz *= light;
	color.xyz += emissive.xyz * u_emissive_factor;
	
	FragColor = color;
}


\normal.fs

#version 330 core

in vec3 v_world_position;
in vec3 v_normal;
in vec2 v_uv;

uniform sampler2D u_normal_texture;
uniform bool u_read_normal;

out vec4 FragColor;

#include "norm_tangent"

void main() {
	
	vec3 N;
	if (!u_read_normal )
		N = normalize( v_normal );
	else{ 
		vec3 normal_pixel = texture2D( u_normal_texture, v_uv ).xyz;
		N = perturbNormal(v_normal, v_world_position, v_uv, normal_pixel);
	}

	FragColor = vec4( abs(normalize(N)), 1.0);
}

\deferred.fs

#version 330 core

uniform sampler2D u_color_texture;
uniform sampler2D u_normal_texture;
uniform sampler2D u_extra_texture;
uniform sampler2D u_depth_texture;
uniform mat4 u_inverse_viewprojection;
uniform vec2 u_iRes;

uniform vec3 u_emissive_factor;

uniform int u_light_type;
uniform vec3 u_light_position;
uniform vec3 u_light_color;
uniform vec3 u_direction;
uniform float u_spotExponent;
uniform float u_spotCosineCutoff;
uniform float u_light_factor;
uniform float u_maxdist;

uniform float u_alpha_cutoff;
uniform vec3 u_camera_eye;

//pass here all the uniforms required for illumination...
out vec4 FragColor;

#include "pbr"

void main()
{	
	//extract uvs from pixel screenpos
	vec2 uv = gl_FragCoord.xy * u_iRes.xy; 
	vec3 color = texture( u_color_texture, uv ).xyz;
	float occlusion = texture(u_extra_texture, uv).x;
	float roughness = texture(u_extra_texture, uv).y;
	float metalness = texture(u_extra_texture, uv).z;
	
	float color_alpha = texture( u_color_texture, uv ).a;
	if(color_alpha < u_alpha_cutoff) discard;
	
	//normals must be converted from 0..1 to -1..+1
	vec3 N = texture( u_normal_texture, uv ).xyz * 2.0 - 1.0;
	
	//reconstruct world position from depth and inv. viewproj
	float depth = texture( u_depth_texture, uv ).x;
	vec4 screen_pos = vec4(uv.x*2.0-1.0, uv.y*2.0-1.0, depth*2.0-1.0, 1.0);
	vec4 proj_worldpos = u_inverse_viewprojection * screen_pos;
	vec3 worldpos = proj_worldpos.xyz / proj_worldpos.w;
	
	//now do your illumination using worldpos and the normal...
	vec3 light = vec3(0.0);
	vec3 L = normalize( u_light_position -  worldpos );

	// PBR
	vec3 V = normalize( u_camera_eye - worldpos);
    vec3 H = normalize( L + V );
    float NoH = clamp(dot(N,H), 0.0, 1.0);
    float NoV = clamp(dot(N,V), 0.0, 1.0);
    float NoL = clamp(dot(N,L), 0.0, 1.0);
    float LoH = clamp(dot(L,H), 0.0, 1.0);
	
	vec3 f0 = mix( vec3(0.5), color.xyz, metalness ); //we compute the reflection in base to the color and the metalness
	vec3 diffuseColor = (1.0 - metalness) * color.xyz; //metallic materials do not have diffuse
	
	vec3 Fr_d = specularBRDF(roughness, f0, NoH, NoV, NoL, LoH); //compute the specular

	// Here we use the Burley, but you can replace it by the Lambert.
	float linearRoughness = pow(roughness, 2);
	vec3 Fd_d = diffuseColor * Fd_Burley(NoV,NoL,LoH,linearRoughness); 	
	vec3 direct = Fr_d + Fd_d; //add diffuse and specular reflection
	
	
	//compute distance
	float light_distance = length(u_light_position - worldpos );
	float att_factor = u_maxdist - light_distance; //compute a linear attenuation factor
	att_factor /= u_maxdist; //normalize factor
	att_factor = max( att_factor, 0.0 ); //ignore negative values
	
	// POINT (type 1)
	if(u_light_type == 1){
		//apply to amount of light
		vec3 point = NoL * u_light_color * u_light_factor * att_factor; 
		light += point * direct;
	}
	
	// SPOT (type 2)
	if(u_light_type == 2){
		L = normalize( u_light_position -  worldpos );
		vec3 D = normalize(u_direction);
		float spotCosine = dot(D,-L);
		float spotFactor = 0.0;
		if (spotCosine >= u_spotCosineCutoff) { 
			spotFactor = pow(spotCosine, u_spotExponent);
		}
		vec3 spot = dot(L, N) * u_light_color * spotFactor * att_factor * u_light_factor;
		light += spot * direct;
	}
	
	// DIRECTIONAL (type 3)
	if(u_light_type == 3){
		L = normalize(u_light_position);
		vec3 directional = dot(L, N) * u_light_color * u_light_factor; 
		light += directional * direct;
	}

	color *= light;
	
	FragColor = vec4(color, 1.0);
}

\add_ambient.fs

#version 330 core

in vec2 v_uv;

uniform vec3 u_ambient_light;
uniform sampler2D u_color_texture;
uniform sampler2D u_metallic_roughness_texture;

//pass here all the uniforms required for illumination...
out vec4 FragColor;

void main()
{
	
	vec4 color = texture2D(u_color_texture, v_uv);
	float occlusion = texture2D(u_metallic_roughness_texture, v_uv).x;
	
	vec3 light = u_ambient_light * occlusion;
	color *= vec4(light, 1.0);
	
	FragColor = color;

}
